{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","flexDirection","split","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","ModalActions","disabled","isFinite","eq","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","amount","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","ApyButton","apr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","props","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanAddressUrl","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","Title","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","countUp","update","updateValue","useRef","useEffect","current","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","children","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","length","Select","options","option","marginLeft","SearchInput","target","sort","b","exact","renderContent","CardValue","lineHeight","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","l","Children","toArray","child","i"],"mappings":"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","file":"static/js/12.f59d6a9e.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>\r\n        {displayBalance}\r\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\r\n      </Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`  \r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\r\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text, Image } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\n// TODO: Use `Text` instead\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>CAKE </Title>\r\n        <Subtle>{t('Earned').toUpperCase()}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{t('Staked').toUpperCase()}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Stake').toUpperCase()} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{t('Enable Farm').toUpperCase()}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = getBscScanAddressUrl(lpAddress)\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\r\n        </Heading>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n"],"sourceRoot":""}