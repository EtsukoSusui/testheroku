{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","hooks/useGetLotteryHasDrawn.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/WinCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","utils/lotteryUtils.ts","hooks/useTickets.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useBuyLottery.ts","hooks/useAllowance.ts","../node_modules/lodash/max.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","lineHeight","gt","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvest","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","lotteryContract","useLottery","getLotteryStatus","state","fetchLotteryStatus","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","console","error","TicketsList","props","primary","WarningModal","onDismiss","title","ModalActions","StyledSpacer","spacing","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","max","symbol","availableSymbol","onChange","onSelectMax","alignItems","type","inputMode","min","placeholder","num","toLocaleString","BuyTicketModal","amount","val","setVal","setRequestedBuy","fullBalance","useMemo","maxTickets","parseInt","getFullDisplayBalance","LOTTERY_TICKET_PRICE","onMultiBuy","useMultiBuyLottery","maxNumber","useMaxNumber","handleBuy","numbers","apply","Math","floor","random","toString","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","currentTarget","validity","valid","toUpperCase","Tips","lotteryPrice","Announce","Final","variant","isInteger","CakeWinnings","claimAmount","cakeAmount","claimAmountBusd","LotteryJackpot","bold","StyledLotteryCard","LotteryCard","requestClaim","setRequestedClaim","allowance","useLotteryAllowance","useModal","PurchaseWarningModal","useTotalClaim","setLastUpdated","onMultiClaim","useMultiClaimLottery","handleClaim","onPresentBuy","marginRight","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","fetchData","useGetStats","tvl","maximumFractionDigits","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","maxApr","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","earn","InPools","WinCard","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","FetchStatus","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","eth","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","multiCall","abi","getWeb3NoAccount","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","newCalls","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","decodeFunctionResult","multiBuy","price","numbersList","send","from","on","tx","transactionHash","getTickets","ticketsContract","customLotteryNum","issueIndex","getTicketsAmount","calls1","options","ticketAbi","tokenIds","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","tickets","multiClaim","claimedStatus","unClaimedIds","lotteryAbi","rewards","finalTokenIds","r","getTotalClaim","drawed","calls4","claim","p","c","sum","getTotalRewards","getMax","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","historyAmount","getWinningNumbers","historyNumbers","winningNumbers","setClaimAmount","claimLoading","setClaimLoading","useLotteryTicket","useWinningNumbers","setWinningNumbers","useTickets","lotteryNumber","setTickets","size","Spacer","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","children","l","React","Children","toArray","child","lotteryTicketContract","txHash","setMax","fetchMax","setAllowance","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"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","file":"static/js/6.b1aab6a6.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    const earningNumber = new BigNumber(earning)\r\n    if (earningNumber.eq(0)) {\r\n      return accum\r\n    }\r\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\r\n  }, 0)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\r\nimport { harvest } from 'utils/callHelpers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const masterChefContract = useMasterchef()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const farmWithBalance of balancesWithValue) {\r\n      try {\r\n        // eslint-disable-next-line no-await-in-loop\r\n        await harvest(masterChefContract, farmWithBalance.pid, account)\r\n      } catch (error) {\r\n        // TODO: find a way to handle when the user rejects transaction or it fails\r\n      }\r\n    }\r\n    setPendingTx(false)\r\n  }, [account, balancesWithValue, masterChefContract])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('CAKE to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('CAKE in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? t('Collecting CAKE')\r\n                : t('Harvest all (%count%)', {\r\n                    count: balancesWithValue.length,\r\n                  })}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import { useEffect, useState } from 'react'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport { getLotteryStatus } from 'utils/lotteryUtils'\r\n\r\n/**\r\n * Returns whether or not the current lottery has drawn numbers\r\n *\r\n * @return {Boolean}\r\n */\r\nconst useGetLotteryHasDrawn = () => {\r\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\r\n  const lotteryContract = useLottery()\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      const fetchLotteryStatus = async () => {\r\n        const state = await getLotteryStatus(lotteryContract)\r\n        setLotteryHasDrawn(state)\r\n      }\r\n\r\n      fetchLotteryStatus()\r\n    }\r\n  }, [lotteryContract])\r\n\r\n  return lotteryHasDrawn\r\n}\r\n\r\nexport default useGetLotteryHasDrawn\r\n","import { useCallback, useState } from 'react'\r\nimport { useLotteryApprove } from './useApprove'\r\n\r\nexport const useApproval = (onPresentApprove: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { onApprove } = useLotteryApprove()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n      onPresentApprove()\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, onPresentApprove])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport default useApproval\r\n","import React from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Modal title={t('Warning')} onDismiss={onDismiss}>\r\n      <TicketsList>\r\n        {t('Lottery ticket purchases are final.')}\r\n        <br />\r\n        {t('Your CAKE will not be returned to you after you spend it to buy tickets.')}\r\n        <br />\r\n        {t('Tickets are only valid for one lottery draw, and will be burned after the draw.')}\r\n        <br />\r\n        {t(\r\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\r\n        )}\r\n      </TicketsList>\r\n      <ModalActions>\r\n        <Button width=\"100%\" onClick={onDismiss}>\r\n          {t('I understand')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst TicketsList = styled.div`\r\n  text-align: left;\r\n  overflow-y: auto;\r\n  max-height: 400px;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nexport default WarningModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  availableSymbol: string\r\n  value: string\r\n  onSelectMax?: () => void\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\">\r\n        <Input type=\"number\" inputMode=\"numeric\" min=\"0\" onChange={onChange} placeholder=\"0\" value={value} />\r\n        <StyledTokenAdornmentWrapper>\r\n          <StyledSpacer />\r\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n          <StyledSpacer />\r\n          <Button scale=\"sm\" onClick={onSelectMax}>\r\n            {t('Max')}\r\n          </Button>\r\n        </StyledTokenAdornmentWrapper>\r\n      </Flex>\r\n      <StyledMaxText>\r\n        {t('%num% %symbol% Available', { num: max.toLocaleString(), symbol: availableSymbol })}\r\n      </StyledMaxText>\r\n    </>\r\n  )\r\n}\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TicketInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport TicketInput from 'components/TicketInput'\r\nimport ModalActions from 'components/ModalActions'\r\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\r\n\r\ninterface BuyTicketModalProps {\r\n  max: BigNumber\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\r\n  const [val, setVal] = useState('1')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [, setRequestedBuy] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getBalanceNumber(max)\r\n  }, [max])\r\n\r\n  const maxTickets = useMemo(() => {\r\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\r\n  }, [max])\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.validity.valid) {\r\n      setVal(e.currentTarget.value)\r\n    }\r\n  }\r\n\r\n  const { onMultiBuy } = useMultiBuyLottery()\r\n  const maxNumber = useMaxNumber()\r\n  const handleBuy = useCallback(async () => {\r\n    try {\r\n      setRequestedBuy(true)\r\n      const length = parseInt(val)\r\n      // @ts-ignore\r\n      // eslint-disable-next-line prefer-spread\r\n      const numbers = Array.apply(null, { length }).map(() => [\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n      ])\r\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedBuy(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\r\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\r\n    } else {\r\n      setVal(maxTickets.toString())\r\n    }\r\n  }, [maxTickets])\r\n\r\n  const cakeCosts = (amount: string): number => {\r\n    return +amount * LOTTERY_TICKET_PRICE\r\n  }\r\n  return (\r\n    <Modal title={t('Enter amount of tickets to buy')} onDismiss={onDismiss}>\r\n      <TicketInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={t('Ticket').toUpperCase()}\r\n        availableSymbol=\"CAKE\"\r\n      />\r\n      <div>\r\n        <Tips>{t('1 Ticket = %lotteryPrice% CAKE', { lotteryPrice: LOTTERY_TICKET_PRICE })}</Tips>\r\n      </div>\r\n      <div>\r\n        <Announce>\r\n          {t('Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.')}\r\n        </Announce>\r\n        <Final>{t('You will spend: %num% CAKE', { num: cakeCosts(val) })}</Final>\r\n      </div>\r\n      <ModalActions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          id=\"lottery-buy-complete\"\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx ||\r\n            !Number.isInteger(parseInt(val)) ||\r\n            parseInt(val) > Number(maxTickets) ||\r\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\r\n            parseInt(val) < 1\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await handleBuy()\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketModal\r\n\r\nconst Tips = styled.div`\r\n  margin-left: 0.4em;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nconst Final = styled.div`\r\n  margin-top: 1em;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\nconst Announce = styled.div`\r\n  margin-top: 1em;\r\n  margin-left: 0.4em;\r\n  color: #ed4b9e;\r\n`\r\n","import React from 'react'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\ninterface CakeWinningsProps {\r\n  claimAmount: BigNumber\r\n}\r\n\r\nconst CakeWinnings: React.FC<CakeWinningsProps> = ({ claimAmount }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeAmount = getBalanceNumber(claimAmount)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const claimAmountBusd = new BigNumber(cakeAmount).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={cakeAmount} lineHeight=\"1.5\" />\r\n      {cakePriceBusd.gt(0) && <CardBusdValue value={claimAmountBusd} decimals={2} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeWinnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst LotteryJackpot = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <Text bold fontSize=\"24px\" style={{ lineHeight: '1.5' }}>\r\n        {t('Coming Soon')}\r\n      </Text>\r\n      <br />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LotteryJackpot\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport { useLotteryAllowance } from 'hooks/useAllowance'\r\nimport { useApproval } from 'hooks/useApproval'\r\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\r\nimport BuyTicketModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeWinnings from './CakeWinnings'\r\nimport LotteryJackpot from './LotteryJackpot'\r\n\r\nconst StyledLotteryCard = styled(Card)`\r\n  background-image: url('/images/ticket-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  margin-top: 24px;\r\n  button {\r\n    flex: 1 0 50%;\r\n  }\r\n`\r\n\r\nconst LotteryCard = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n  const [requestClaim, setRequestedClaim] = useState(false)\r\n  const { t } = useTranslation()\r\n  const allowance = useLotteryAllowance()\r\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\r\n  const { claimAmount, setLastUpdated } = useTotalClaim()\r\n  const { onMultiClaim } = useMultiClaimLottery()\r\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\r\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      setRequestedClaim(true)\r\n      const txHash = await onMultiClaim()\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedClaim(false)\r\n        setLastUpdated()\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiClaim, setRequestedClaim, setLastUpdated])\r\n\r\n  const renderLotteryTicketButtonBuyOrApprove = () => {\r\n    if (!allowance.toNumber()) {\r\n      return (\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n          {t('Approve CAKE')}\r\n        </Button>\r\n      )\r\n    }\r\n    if (lotteryHasDrawn) {\r\n      return <Button disabled> {t('On sale soon')}</Button>\r\n    }\r\n    return (\r\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy}>\r\n        {t('Buy Tickets')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  const [onPresentBuy] = useModal(<BuyTicketModal max={cakeBalance} />)\r\n\r\n  return (\r\n    <StyledLotteryCard>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Your Lottery Winnings')}\r\n        </Heading>\r\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('CAKE to Collect')}:</Label>\r\n          <CakeWinnings claimAmount={claimAmount} />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('Total jackpot this round')}:</Label>\r\n          <LotteryJackpot />\r\n        </Block>\r\n        {account ? (\r\n          <Actions>\r\n            <Button\r\n              id=\"dashboard-collect-winnings\"\r\n              disabled={getBalanceNumber(claimAmount) === 0 || requestClaim}\r\n              onClick={handleClaim}\r\n              style={{ marginRight: '8px' }}\r\n            >\r\n              {t('Collect Winnings')}\r\n            </Button>\r\n            {renderLotteryTicketButtonBuyOrApprove()}\r\n          </Actions>\r\n        ) : (\r\n          <Actions>\r\n            <UnlockButton width=\"100%\" />\r\n          </Actions>\r\n        )}\r\n      </CardBody>\r\n    </StyledLotteryCard>\r\n  )\r\n}\r\n\r\nexport default LotteryCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Cake Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={20} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const { t } = useTranslation()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading scale=\"lg\" mb=\"24px\">\r\n          {t('Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <Skeleton height={66} />\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/* eslint-disable camelcase */\r\nexport interface DeBankTvlResponse {\r\n  id: string\r\n  chain: string\r\n  name: string\r\n  site_url: string\r\n  logo_url: string\r\n  has_supported_portfolio: boolean\r\n  tvl: number\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\r\n        const responseData: DeBankTvlResponse = await response.json()\r\n\r\n        setData(responseData)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\r\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\r\nimport { getFarmApr } from 'utils/apr'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPRCard = () => {\r\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Fetch farm data once to get the max APR\r\n  useEffect(() => {\r\n    const fetchFarmData = async () => {\r\n      try {\r\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\r\n      } finally {\r\n        setIsFetchingFarmData(false)\r\n      }\r\n    }\r\n\r\n    fetchFarmData()\r\n  }, [dispatch, setIsFetchingFarmData])\r\n\r\n  const highestApr = useMemo(() => {\r\n    if (cakePrice.gt(0)) {\r\n      const aprs = farmsLP.map((farm) => {\r\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n          return getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity)\r\n        }\r\n        return null\r\n      })\r\n\r\n      const maxApr = max(aprs)\r\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n    }\r\n    return null\r\n  }, [cakePrice, farmsLP])\r\n\r\n  const aprText = highestApr || '-'\r\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\r\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {earnUpTo}\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">\r\n            {highestApr && !isFetchingFarmData ? (\r\n              `${highestApr}%`\r\n            ) : (\r\n              <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n            )}\r\n          </CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              {InFarms}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPRCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#53dee9, #7645d9);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\n\r\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\r\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n// Always include CAKE\r\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\r\n\r\nconst EarnAssetCard = () => {\r\n  const { t } = useTranslation()\r\n  const assetText = t('Earn %assets% in Pools', { assets })\r\n  const [earn, InPools] = assetText.split(assets)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {earn}\r\n          </Heading>\r\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              {InPools}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst WinCard = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {t('Lottery')}\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">{t('Coming Soon')}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\" />\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default WinCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {t('PancakeSwap')}\r\n        </Heading>\r\n        <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <LotteryCard />\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPRCard />\r\n          <EarnAssetCard />\r\n          <WinCard />\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const web3 = useWeb3()\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      try {\r\n        const res = await contract.methods.balanceOf(account).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { DEFAULT_TOKEN_DECIMAL, LOTTERY_TICKET_PRICE } from 'config'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { getMulticallAddress } from './addressHelpers'\r\nimport { BIG_ZERO } from './bigNumber'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3NoAccount()\r\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(DEFAULT_TOKEN_DECIMAL).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finalTokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finalTokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finalTokenIds.length > 200) {\r\n    finalTokenIds = finalTokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finalTokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenIds = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIndex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenIds.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BIG_ZERO)\r\n\r\n    return claim\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return BIG_ZERO\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIndex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\r\n\r\n    return new BigNumber(amount).div(DEFAULT_TOKEN_DECIMAL).div(LOTTERY_TICKET_PRICE).toNumber()\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useRefresh from './useRefresh'\r\nimport {\r\n  getTotalRewards,\r\n  getTotalClaim,\r\n  getMatchingRewardLength,\r\n  getWinningNumbers,\r\n  getTickets,\r\n} from '../utils/lotteryUtils'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\nconst useTickets = (lotteryNumber = null) => {\r\n  const [tickets, setTickets] = useState([])\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\r\n      setTickets(res)\r\n    }\r\n\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\r\n\r\n  return tickets\r\n}\r\n\r\nexport const useTotalRewards = () => {\r\n  const [rewards, setRewards] = useState(BIG_ZERO)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTotalRewards(lotteryContract)\r\n      setRewards(new BigNumber(res))\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, fastRefresh])\r\n\r\n  return rewards\r\n}\r\n\r\nexport const useTotalClaim = () => {\r\n  const [claimAmount, setClaimAmount] = useState(BIG_ZERO)\r\n  const [claimLoading, setClaimLoading] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setClaimLoading(true)\r\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\r\n    setClaimAmount(claim)\r\n    setClaimLoading(false)\r\n  }, [account, lotteryContract, ticketsContract])\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, fetchBalance, lotteryContract, ticketsContract, lastUpdated])\r\n\r\n  return { claimLoading, claimAmount, setLastUpdated }\r\n}\r\n\r\nexport const useWinningNumbers = () => {\r\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const rewards = await getWinningNumbers(lotteryContract)\r\n      setWinningNumbers(rewards)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\r\n\r\n  return winningNumbers\r\n}\r\n\r\nexport const useMatchingRewardLength = (numbers) => {\r\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const matchedNumbers = await getMatchingRewardLength(lotteryContract, numbers)\r\n      setMatchingNumbers(matchedNumbers)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, numbers, fastRefresh])\r\n\r\n  return matchingNumbers\r\n}\r\n\r\nexport default useTickets\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\r\n\r\nexport const useMultiClaimLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n  const lotteryTicketContract = useLotteryTicket()\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\r\n      return txHash\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lotteryContract, lotteryTicketContract])\r\n\r\n  return { onMultiClaim: handleClaim }\r\n}\r\n\r\nexport const useMultiBuyLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleBuy = useCallback(\r\n    async (amount: string, numbers: Array<any>) => {\r\n      try {\r\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\r\n        return txHash\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    },\r\n    [account, lotteryContract],\r\n  )\r\n\r\n  return { onMultiBuy: handleBuy }\r\n}\r\n\r\nexport const useMaxNumber = () => {\r\n  const [max, setMax] = useState(5)\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchMax = useCallback(async () => {\r\n    const maxNumber = await getMax(lotteryContract)\r\n    setMax(maxNumber)\r\n  }, [lotteryContract])\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      fetchMax()\r\n    }\r\n  }, [lotteryContract, fetchMax])\r\n\r\n  return max\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { getLotteryAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useCake } from './useContract'\r\nimport useRefresh from './useRefresh'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllowance()\r\n    }\r\n  }, [account, cakeContract, fastRefresh])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\r\n  const { account } = useWeb3React()\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetch()\r\n    }\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}